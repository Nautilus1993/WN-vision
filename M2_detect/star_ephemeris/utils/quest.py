import numpy
import math

import numpy as np
import scipy
from scipy.spatial.transform import Rotation as R

def quest(v_b,v_i,w):
    # %%%Quaternion Estimator(QUEST)
    # %
    # % Inputs:
    # % v_b = Unit measurement vectors in the spacecraft body frame(3 xn).
    # % v_i = Corresponding unit vectors known in the inertial frame(3 xn).
    # % w = Non negative weight assigned to each observations(nx1).
    # %
    # % Outputs:
    # % q_opt = Optimal quaternion that transforms vectors in inertial frame to
    # %vectors in body frame([q0, q1, q2, q3] ').
    # % C_opt = Optimal# rotation matrix that transforms vectors in inertial
    # % frame to vectors in body frame.
    # %
    # % Reference: %[1]Malcolm D.Shuster - Three - axis Attitude Determination from Vector Observations(1981)
    # % Error tolerance
    tolerance = 10e-8
    # w.T = repmat(w,[1,3])'
    B = v_b*w@v_i.T
    Z = [[B[1,2]-B[2,1]],[B[2,0]-B[0,2]],[B[0,1]-B[1,0]]]
    Z = np.array(Z)
    S = B + B.T
    #矩阵的迹
    sigma = B.trace()
    #矩阵行列式
    delta = np.linalg.det(S)
    #inv矩阵求逆
    kappa = (delta*np.linalg.inv(S)).trace()
    a = sigma**2 - kappa
    b = sigma**2 + Z.T@Z
    c = delta + Z.T@S@Z
    xxxx  = S@S
    d = Z.T@xxxx@Z
    constant = a*b + c*sigma -d

    lamb = len(w[0])*0.01
    last_lambda = 0.0
    while abs(lamb-last_lambda) >= tolerance:
        last_lambda = lamb
        f = lamb**4 -(a+b)*lamb**2 - c*lamb +constant
        f_dot = 4*lamb**3 - 2*(a+b)*lamb -c
        lamb = lamb -f/f_dot

    omega =lamb
    alpha = omega**2 -sigma**2 +kappa
    beta = omega -sigma
    gamma = (omega+sigma)*alpha-delta
    X = (alpha*np.eye(3)+beta*S + S@S)@Z
    #norm求范式   np.vstack给矩阵插一行,以下为四元数与旋转矩阵
    q_opt = np.vstack([X, gamma])/math.sqrt(gamma**2+np.linalg.norm(X)**2)
    C_opt = R.from_quat(q_opt.T).as_matrix()
    #返回四元数即可
    return list(q_opt.T)

if __name__ == '__main__':
    b=[[0.98422453,- 0.15312887,- 0.08862069],
     [0.9964089 ,- 0.01040169 ,- 0.08403035],
     [0.99033015 ,- 0.13748987 ,- 0.01851277],
     [0.99400531, - 0.00490948 , 0.10922153],
    [0.99033015, - 0.13748987 ,- 0.01851277],
    [0.99400531 ,- 0.00490948,0.10922153],
    [0.98994915 ,- 0.13318175 , 0.04757413],
    [0.98982144,0.00462654, - 0.14223961],
    [0.98994915, - 0.13318175  ,0.04757413],
    [0.98982144,0.00462654 ,- 0.14223961],
    [0.98996749 ,- 0.0886889 ,  0.10999385],
    [0.99893414,0.01502178,0.04364558],
    [0.98996749 ,- 0.0886889   ,0.10999385],
    [0.99893414,0.01502178,0.04364558],
    [0.99356099 ,- 0.08054037 , 0.07968573],
    [0.98582691,0.02297047, 0.16618561],
    [0.98924421 ,- 0.07882604, - 0.12321665],
    [0.99778755,0.05169828,0.04180059],
    [0.99601835 ,- 0.05950143 , 0.06638544],
    [0.99488138,0.08206368,0.05896256],
    [0.9978797, - 0.05531772 , 0.03429366],
    [0.98777844,0.11244504,0.10793451],
    [0.99962179 ,- 0.0248662  , 0.01174493],
    [0.98935359,0.13075089,0.06390363],
    [0.9964089 ,- 0.01040169 ,- 0.08403035],
    [0.98189818,0.14953322,0.11625738],
    [0.98544982, - 0.15385346 , 0.07223407]]
    r = [[-0.14451295 ,- 0.98552292 ,- 0.08866129],
         [-0.00168385 ,- 0.99645886 ,- 0.08404513],
         [-0.12878262 ,- 0.99145669, - 0.01854961],
         [0.00382101, - 0.99401392,  0.10918424],
    [-0.12878437, - 0.99126713, - 0.01857728],
    [0.00382101, - 0.99401392,0.10918424],
    [-0.12451858 ,- 0.99107569 , 0.04753359],
    [0.01331043, - 0.98972954, - 0.14228859],
    [-0.12451858, - 0.99107569,0.04753359],
    [0.01326742, - 0.98969544 ,- 0.14230757],
    [-0.07997744 ,- 0.990712,0.10996246],
    [0.02377582, - 0.9987532 ,  0.04362061],
    [-0.07997744, - 0.990712, 0.10996246],
    [0.02379375 ,- 0.99866575 , 0.04358474],
    [-0.07182298 ,- 0.99422936, 0.07962975],
    [0.03161788 ,- 0.98558616,  0.16614524],
    [-0.07015898, - 0.98989202, - 0.1232482],
    [0.06043109 ,- 0.99729837,0.0417617],
    [-0.0507537 ,- 0.99650346 , 0.0663472],
    [0.09076898, - 0.99412871,0.05890856],
    [-0.0465673, - 0.99832413 , 0.03422628],
    [0.12106976 ,- 0.98676206, 0.107897],
    [-0.01611334, - 0.99980135,  0.01169963],
    [0.1393843, - 0.98817885,0.06382868],
    [-0.00168385 ,- 0.99645886, - 0.08404513],
    [0.15816117 ,- 0.98054861, 0.11618134],
    [-0.14520795 ,- 0.98676242  ,0.07219997]]
    b = [
        [-39481.101,-13956.086,95.619071],
        [32659.358,22884.511,1786.6079],
        [-333000.38,196794.46,116202.12]
    ]
    r = [
        [-5070,4655,1175],
        [2066,-9640,-1533],
        [42956,63394,5663]
    ]
    v_b = b
    v_i = r
    n = len(v_b)
    w = 0.01 * np.ones((n,3),float)
    # print(w)
    a= quest(np.array(v_b).T,np.array(v_i).T,w.T)
    print(a)